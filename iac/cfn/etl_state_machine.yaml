AWSTemplateFormatVersion: '2010-09-09'
Description: ELT state machine for running Matillion jobs and Snowflake transformations

Parameters:
  ProjectName:
    Type: String
    Description: 'Project name'
    Default: 'arch_prj'
  Environment:
    Type: String
    Description: 'Select an environment'
    AllowedValues:
      - dev
      - uat
      - prod
  ExecutionInput:
    Type: String
    Description: 'ELT State Machine Execution Input (in JSON)'
    Default: '{ }'

Resources:
  SnowflakeLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: SecretsManagerReadOnlyPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource: "*"
          - Effect: Allow
            Action:
            - secretsmanager:ListSecrets
            Resource: "*"
      - PolicyName: S3ReadOnlyAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:Get*
            - s3:List*
            - s3-object-lambda:Get*
            - s3-object-lambda:List*
            Resource: "*"

  SnowflakeLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join [ '-', [ "SnowflakeRunner", !Ref Environment ] ]
      Handler: snowflake_transformation.lambda_handler
      Runtime: python3.9
      Role: !GetAtt SnowflakeLambdaFunctionRole.Arn
      MemorySize: 128
      Timeout: 600
      Code:
        S3Bucket:
          Fn::ImportValue: !Join [ '-', [ "fluidmachine", "code-deploy", !Ref Environment ] ]
        S3Key: packages/snow_lambda.zip
      Tags:
        - Key: env
          Value: !Ref Environment
        - Key: proj
          Value: !Ref ProjectName

  MatillionLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AppendToLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: SecretsManagerReadOnlyPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetResourcePolicy
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret
            - secretsmanager:ListSecretVersionIds
            Resource: "*"
          - Effect: Allow
            Action:
            - secretsmanager:ListSecrets
            Resource: "*"

  MatillionLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join [ '-', [ "MatillionJobRunner", !Ref Environment ] ]
      Handler: matillion_job_runner.lambda_handler
      Runtime: python3.9
      Role: !GetAtt MatillionLambdaFunctionRole.Arn
      MemorySize: 128
      Timeout: 600
      Code:
        S3Bucket:
          Fn::ImportValue: !Join [ '-', [ "fluidmachine", "code-deploy", !Ref Environment ] ]
        S3Key: packages/snow_lambda.zip
      Tags:
        - Key: env
          Value: !Ref Environment
        - Key: proj
          Value: !Ref ProjectName


  ELTStateMachineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'

  ELTStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: !Join [ '-', [ "GenerationELTStateMachine", !Ref Environment ] ]
      DefinitionS3Location:
        Bucket:
          Fn::ImportValue: !Join [ '-', [ "fluidmachine", "code-deploy", !Ref Environment ] ]
        Key: jobs/step_functions/ELTStateMachine.asl.json
      DefinitionSubstitutions:
        MatillionLambdaFunctionArn: !GetAtt MatillionLambdaFunction.Arn
        SnowflakeLambdaFunctionArn: !GetAtt SnowflakeLambdaFunction.Arn
      RoleArn: !GetAtt ELTStateMachineExecutionRole.Arn
      Tags:
        - Key: env
          Value: !Ref Environment
        - Key: proj
          Value: !Ref ProjectName

  SchedulerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: scheduler.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: SchedulerExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: !GetAtt ELTStateMachine.Arn

  NightlySchedule:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Name: !Join [ '-', [ "DailyAtNight", !Ref Environment ] ]
      Description: 'Run the job daily at night'
      ScheduleExpression: 'cron(30 22 ? * * *)'
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Input: !Ref ExecutionInput
        Arn: !GetAtt ELTStateMachine.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

Outputs:
  MatillionFunction:
    Description: Name of Matillion job runner lambda function
    Value: !Ref MatillionLambdaFunction
  SnowflakeFunction:
    Description: Name of Snowflake transformation job lambda function
    Value: !Ref SnowflakeLambdaFunction
  StateMachineArn:
    Description: Name of State Machine's ARN
    Value: !GetAtt ELTStateMachine.Arn
  ScheduleRoleArn:
    Description: Name of Scheduler Arn
    Value: !GetAtt SchedulerRole.Arn

  # ExecutionInput:
  #   Description: Sample input to StartExecution.
  #   Value: '{ "timer_seconds": 10 }'
