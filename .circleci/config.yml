version: 2.1

executors:
  aws-cli-executor:
    docker:
      - image: cimg/aws:2023.04
    resource_class: small
    working_directory: ~/workspace
  python-executor:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    working_directory: ~/workspace
  ubuntu-executor:
    machine:
      image: ubuntu-2204:2022.07.1
    resource_class: medium
    working_directory: ~/workspace

commands:
  get_listing:
    steps:
      - run: pwd; ls -la
  install_python:
    steps:
      - run:
          name: Install python in environment
          command: |
            sudo apt-get update
            sudo apt-get install python3.9
  create_virtual_env:
    steps:
      - run:
          name: Create a virual environment
          command: |
            pip3 install --upgrade pip
            pip3 install --user virtualenv
            virtualenv venv
            source venv/bin/activate
  get_schema_change_repo:
    steps:
      - run:
          name: Get schemachange repo and install
          command: |
            python3 -m pip install 'schemachange @ git+https://github.com/Snowflake-Labs/schemachange'
            schemachange -h
  deploy_snowflake:
    parameters:
      snowflake_authenticator:
        type: string
        default: snowflake
    steps:
      - get_schema_change_repo
      - run:
          name: Snowflake deployment using schemachange
          command: |
            SNOWFLAKE_AUTHENTICATOR=<< parameters.snowflake_authenticator >> \
            schemachange \
            -f ./databases/snowflake/migrations \
            -a ${SNOWFLAKE_ACCOUNT} \
            -u ${SNOWFLAKE_USER} \
            -r ${SNOWFLAKE_ROLE} \
            -w ${SNOWFLAKE_WAREHOUSE} \
            -d ${SNOWFLAKE_DATABASE} \
            -c ${SNOWFLAKE_DATABASE}.${SNOWFLAKE_SCHEMA}.CHANGE_HISTORY \
            --create-change-history-table \
            --query-tag DATA_ENGINEERING \
            --vars "{\"DB\": \"${SNOWFLAKE_DATABASE}\", \"SCHEMA\": \"${SNOWFLAKE_SCHEMA}\" }" \
            -v
  deploy_aws:
    steps:
      - run:
          name: AWS deployment
          command: |
            aws --version
            bash scripts/deploy_aws.sh ${ENV}
  deploy_matillion:
    steps:
      - run:
          name: Matillion deployment
          command: |
            echo TODO - deploy matillion
  deploy_fivetran:
    steps:
      - run:
          name: Fivetran deployment
          command: |
            echo FIXME - deploy fivetran
            # echo AUTH_TOKEN=\"${FIVETRAN_AUTH_TOKEN}\" > .env
            # bash scripts/deploy_fivetran.sh

jobs:
  fetch-code:
    description: Checkout codebase
    executor: aws-cli-executor
    steps:
      - checkout # check out the code in the project directory
      - get_listing
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  build-code:
    description: Building the codebase and running through the test cases
    executor: python-executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - get_listing
      - create_virtual_env
      - run:
          name: Installing requirements
          command: pip3 install -r requirements.txt
      - run:
          name: Clean, lint, and run static scan on codebase
          command: pre-commit run --all-files
      - run:
          name: Test codebase
          command: echo unit testing and code coverage of the build
      - run:
          name: Build snowflake lambda package
          command: bash scripts/snowflake_lambda.sh snow_lambda ~/workspace/functions ~/workspace/snow_lambda.zip
      - store_artifacts:
          path: ./snow_lambda.zip
          destination: snow_lambda
      - run:
          name: Build codebase
          command: |
            zip -r ./artifact.zip . -x ".git/*" "venv/*" "schemachange/*" "snow_lambda/*"
            chmod 755 artifact.zip
      - store_artifacts:
          path: ./artifact.zip
          destination: artifact
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  deploy-dev:
    description: Deploy to the DEV environment
    executor: aws-cli-executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - run: source venv/bin/activate
      - deploy_snowflake:
          snowflake_authenticator: snowflake
      - deploy_aws
      - deploy_matillion
      - deploy_fivetran
    environment:
      ENV: Dev

  deploy-uat:
    description: Deploy to the UAT environment
    executor: aws-cli-executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - run: source venv/bin/activate
      # - deploy_snowflake:
      #     snowflake_authenticator: snowflake
      # - deploy_aws
      # - deploy_matillion
      # - deploy_fivetran
    environment:
      ENV: Uat

  deploy-prod:
    description: Deploy to the PROD environment
    executor: aws-cli-executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - run: source venv/bin/activate
      # - deploy_snowflake:
      #     snowflake_authenticator: snowflake
      # - deploy_aws
      # - deploy_matillion
      # - deploy_fivetran
    environment:
      ENV: Prod

workflows:
  version: 2
  my-workflow:
    jobs:
      - fetch-code
      - build-code:
          requires:
              - fetch-code

      # deploy the build to dev
      - deploy-dev:
          requires:
              - build-code
          context:
            - FluidStreetMachineDev
          filters:
            branches:
              only:
                - /^develop\/.*/

      # deploy the build to uat
      - deploy-to-uat?:
          type: approval
          requires:
            - build-code
          filters:
            branches:
              only:
                - /^release\/.*/
      - deploy-uat:
          requires:
            - deploy-to-uat?
          context:
            - FluidStreetMachineUat
          filters:
            branches:
              only:
                - /^release\/.*/

      # deploy the build to prod
      - deploy-to-prod?:
          type: approval
          requires:
            - deploy-uat
      - deploy-prod:
          requires:
            - deploy-to-prod?
          context:
            - FluidStreetMachineProd
